major_version: "local"
minor_version: ""
default_target_cpu: "cortex-m0plus"

default_toolchain {
  cpu: "cortex-m0plus"
  toolchain_identifier: "cortex-m0plus-none"
}

toolchain {
  abi_version: "arm-none-eabi"
  abi_libc_version: "arm-none-eabi"
  builtin_sysroot: ""
  compiler: "compiler"
  host_system_name: "local"
  needsPic: true
  supports_gold_linker: false
  supports_incremental_linker: false
  supports_fission: false
  supports_interface_shared_objects: false
  supports_normalizing_ar: false
  supports_start_end_lib: false
  supports_thin_archives: false
  target_libc: "cortex-m0plus-none"
  target_cpu: "cortex-m0plus"
  target_system_name: "cortex-m0plus-none"
  toolchain_identifier: "cortex-m0plus-none"

  tool_path { name: "ar" path: "/usr/bin/arm-none-eabi-ar" }
  tool_path { name: "compat-ld" path: "/usr/bin/arm-none-eabi-ld" }
  tool_path { name: "cpp" path: "/usr/bin/arm-none-eabi-cpp" }
  tool_path { name: "gcc" path: "/usr/bin/arm-none-eabi-gcc" }
  compiler_flag: "-mcpu=cortex-m0plus"
  compiler_flag: "-mthumb"
  cxx_flag: "-std=c++14"
  linker_flag: "-lstdc++"

  # TODO(bazel-team): In theory, the path here ought to exactly match the path
  # used by gcc. That works because bazel currently doesn't track files at
  # absolute locations and has no remote execution, yet. However, this will need
  # to be fixed, maybe with auto-detection?
  cxx_builtin_include_directory: "/usr/lib/gcc/"
  cxx_builtin_include_directory: "/usr/include"
  # cxx_builtin_include_directory: "/usr/include"
  tool_path { name: "gcov" path: "/usr/bin/arm-none-eabi-gcov" }

  # C(++) compiles invoke the compiler (as that is the one knowing where
  # to find libraries), but we provide LD so other rules can invoke the linker.
  tool_path { name: "ld" path: "/usr/bin/arm-none-eabi-ld" }

  tool_path { name: "nm" path: "/usr/bin/arm-none-eabi-nm" }
  tool_path { name: "objcopy" path: "/usr/bin/arm-none-eabi-objcopy" }
  objcopy_embed_flag: "-I"
  objcopy_embed_flag: "binary"
  tool_path { name: "objdump" path: "/usr/bin/arm-none-eabi-objdump" }
  tool_path { name: "strip" path: "/usr/bin/arm-none-eabi-strip" }
}
